use call_dispatch_macro::call_dispatch;
use futures_lite::future;

struct Syscall;

#[call_dispatch]
impl Syscall {
    #[dispatcher(match_arm_prefix = "sys")]
    async fn dispatch(&mut self, num: u32, _args: [usize; 0]) -> Option<i32> {
        panic!("code generated by macro")
    }

    #[call]
    async fn async_fn(&mut self) -> i32 {
        1
    }

    #[call]
    fn normal_fn(&mut self) -> i32 {
        2
    }
}

mod sys {
    pub const ASYNC_FN: u32 = 1;
    pub const NORMAL_FN: u32 = 2;
}

fn main() {
    future::block_on(async {
        let mut syscall = Syscall;
        assert_eq!(syscall.dispatch(0, []).await, None);
        assert_eq!(syscall.dispatch(1, []).await, Some(1));
        assert_eq!(syscall.dispatch(2, []).await, Some(2));
    });
}
