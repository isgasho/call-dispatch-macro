use call_dispatch_macro::call_dispatch;

struct Syscall;

#[call_dispatch]
impl Syscall {
    #[dispatcher(match_arm_prefix = "sys")]
    fn dispatch(&mut self, num: u32, args: [usize; 6]) -> Option<i32> {
        panic!("code generated by macro")
    }

    #[call]
    fn sys_read(&mut self, fd: i32, buf: *mut u8, len: usize) -> i32 {
        println!("sys_read: fd={:?}, buf=({:?}; {:?})", fd, buf, len);
        1
    }

    #[call]
    fn sys_write(&mut self, fd: i32, buf: *const u8, len: usize) -> i32 {
        println!("sys_write: fd={:?}, buf=({:?}; {:?})", fd, buf, len);
        2
    }
}

mod sys {
    pub const SYS_READ: u32 = 1;
    pub const SYS_WRITE: u32 = 2;
}

fn main() {
    let mut syscall = Syscall;
    assert_eq!(syscall.dispatch(0, [1, 2, 3, 4, 5, 6]), None);
    assert_eq!(syscall.dispatch(1, [1, 2, 3, 4, 5, 6]), Some(1));
    assert_eq!(syscall.dispatch(2, [1, 2, 3, 4, 5, 6]), Some(2));
}
